// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: DomainsService,FloatingIPsService,FloatingIPActionsService,DropletsService)

// Package mock_godo is a generated GoMock package.
package mock_godo

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "github.com/golang/mock/gomock"
)

// MockDomainsService is a mock of DomainsService interface.
type MockDomainsService struct {
	ctrl     *gomock.Controller
	recorder *MockDomainsServiceMockRecorder
}

// MockDomainsServiceMockRecorder is the mock recorder for MockDomainsService.
type MockDomainsServiceMockRecorder struct {
	mock *MockDomainsService
}

// NewMockDomainsService creates a new mock instance.
func NewMockDomainsService(ctrl *gomock.Controller) *MockDomainsService {
	mock := &MockDomainsService{ctrl: ctrl}
	mock.recorder = &MockDomainsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainsService) EXPECT() *MockDomainsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDomainsService) Create(arg0 context.Context, arg1 *godo.DomainCreateRequest) (*godo.Domain, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Domain)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDomainsServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDomainsService)(nil).Create), arg0, arg1)
}

// CreateRecord mocks base method.
func (m *MockDomainsService) CreateRecord(arg0 context.Context, arg1 string, arg2 *godo.DomainRecordEditRequest) (*godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockDomainsServiceMockRecorder) CreateRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockDomainsService)(nil).CreateRecord), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockDomainsService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDomainsServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomainsService)(nil).Delete), arg0, arg1)
}

// DeleteRecord mocks base method.
func (m *MockDomainsService) DeleteRecord(arg0 context.Context, arg1 string, arg2 int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockDomainsServiceMockRecorder) DeleteRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockDomainsService)(nil).DeleteRecord), arg0, arg1, arg2)
}

// EditRecord mocks base method.
func (m *MockDomainsService) EditRecord(arg0 context.Context, arg1 string, arg2 int, arg3 *godo.DomainRecordEditRequest) (*godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditRecord indicates an expected call of EditRecord.
func (mr *MockDomainsServiceMockRecorder) EditRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRecord", reflect.TypeOf((*MockDomainsService)(nil).EditRecord), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockDomainsService) Get(arg0 context.Context, arg1 string) (*godo.Domain, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Domain)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDomainsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDomainsService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockDomainsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Domain, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Domain)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockDomainsServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDomainsService)(nil).List), arg0, arg1)
}

// Record mocks base method.
func (m *MockDomainsService) Record(arg0 context.Context, arg1 string, arg2 int) (*godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Record indicates an expected call of Record.
func (mr *MockDomainsServiceMockRecorder) Record(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockDomainsService)(nil).Record), arg0, arg1, arg2)
}

// Records mocks base method.
func (m *MockDomainsService) Records(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Records", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Records indicates an expected call of Records.
func (mr *MockDomainsServiceMockRecorder) Records(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Records", reflect.TypeOf((*MockDomainsService)(nil).Records), arg0, arg1, arg2)
}

// RecordsByName mocks base method.
func (m *MockDomainsService) RecordsByName(arg0 context.Context, arg1, arg2 string, arg3 *godo.ListOptions) ([]godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordsByName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RecordsByName indicates an expected call of RecordsByName.
func (mr *MockDomainsServiceMockRecorder) RecordsByName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordsByName", reflect.TypeOf((*MockDomainsService)(nil).RecordsByName), arg0, arg1, arg2, arg3)
}

// RecordsByType mocks base method.
func (m *MockDomainsService) RecordsByType(arg0 context.Context, arg1, arg2 string, arg3 *godo.ListOptions) ([]godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordsByType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RecordsByType indicates an expected call of RecordsByType.
func (mr *MockDomainsServiceMockRecorder) RecordsByType(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordsByType", reflect.TypeOf((*MockDomainsService)(nil).RecordsByType), arg0, arg1, arg2, arg3)
}

// RecordsByTypeAndName mocks base method.
func (m *MockDomainsService) RecordsByTypeAndName(arg0 context.Context, arg1, arg2, arg3 string, arg4 *godo.ListOptions) ([]godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordsByTypeAndName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RecordsByTypeAndName indicates an expected call of RecordsByTypeAndName.
func (mr *MockDomainsServiceMockRecorder) RecordsByTypeAndName(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordsByTypeAndName", reflect.TypeOf((*MockDomainsService)(nil).RecordsByTypeAndName), arg0, arg1, arg2, arg3, arg4)
}

// MockFloatingIPsService is a mock of FloatingIPsService interface.
type MockFloatingIPsService struct {
	ctrl     *gomock.Controller
	recorder *MockFloatingIPsServiceMockRecorder
}

// MockFloatingIPsServiceMockRecorder is the mock recorder for MockFloatingIPsService.
type MockFloatingIPsServiceMockRecorder struct {
	mock *MockFloatingIPsService
}

// NewMockFloatingIPsService creates a new mock instance.
func NewMockFloatingIPsService(ctrl *gomock.Controller) *MockFloatingIPsService {
	mock := &MockFloatingIPsService{ctrl: ctrl}
	mock.recorder = &MockFloatingIPsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloatingIPsService) EXPECT() *MockFloatingIPsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFloatingIPsService) Create(arg0 context.Context, arg1 *godo.FloatingIPCreateRequest) (*godo.FloatingIP, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.FloatingIP)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockFloatingIPsServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFloatingIPsService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockFloatingIPsService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFloatingIPsServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFloatingIPsService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockFloatingIPsService) Get(arg0 context.Context, arg1 string) (*godo.FloatingIP, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.FloatingIP)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockFloatingIPsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFloatingIPsService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockFloatingIPsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.FloatingIP, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.FloatingIP)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockFloatingIPsServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFloatingIPsService)(nil).List), arg0, arg1)
}

// MockFloatingIPActionsService is a mock of FloatingIPActionsService interface.
type MockFloatingIPActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockFloatingIPActionsServiceMockRecorder
}

// MockFloatingIPActionsServiceMockRecorder is the mock recorder for MockFloatingIPActionsService.
type MockFloatingIPActionsServiceMockRecorder struct {
	mock *MockFloatingIPActionsService
}

// NewMockFloatingIPActionsService creates a new mock instance.
func NewMockFloatingIPActionsService(ctrl *gomock.Controller) *MockFloatingIPActionsService {
	mock := &MockFloatingIPActionsService{ctrl: ctrl}
	mock.recorder = &MockFloatingIPActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloatingIPActionsService) EXPECT() *MockFloatingIPActionsServiceMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockFloatingIPActionsService) Assign(arg0 context.Context, arg1 string, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Assign indicates an expected call of Assign.
func (mr *MockFloatingIPActionsServiceMockRecorder) Assign(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockFloatingIPActionsService)(nil).Assign), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockFloatingIPActionsService) Get(arg0 context.Context, arg1 string, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockFloatingIPActionsServiceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFloatingIPActionsService)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockFloatingIPActionsService) List(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockFloatingIPActionsServiceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFloatingIPActionsService)(nil).List), arg0, arg1, arg2)
}

// Unassign mocks base method.
func (m *MockFloatingIPActionsService) Unassign(arg0 context.Context, arg1 string) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unassign", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Unassign indicates an expected call of Unassign.
func (mr *MockFloatingIPActionsServiceMockRecorder) Unassign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unassign", reflect.TypeOf((*MockFloatingIPActionsService)(nil).Unassign), arg0, arg1)
}

// MockDropletsService is a mock of DropletsService interface.
type MockDropletsService struct {
	ctrl     *gomock.Controller
	recorder *MockDropletsServiceMockRecorder
}

// MockDropletsServiceMockRecorder is the mock recorder for MockDropletsService.
type MockDropletsServiceMockRecorder struct {
	mock *MockDropletsService
}

// NewMockDropletsService creates a new mock instance.
func NewMockDropletsService(ctrl *gomock.Controller) *MockDropletsService {
	mock := &MockDropletsService{ctrl: ctrl}
	mock.recorder = &MockDropletsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletsService) EXPECT() *MockDropletsServiceMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockDropletsService) Actions(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Actions indicates an expected call of Actions.
func (mr *MockDropletsServiceMockRecorder) Actions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockDropletsService)(nil).Actions), arg0, arg1, arg2)
}

// Backups mocks base method.
func (m *MockDropletsService) Backups(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backups", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Backups indicates an expected call of Backups.
func (mr *MockDropletsServiceMockRecorder) Backups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backups", reflect.TypeOf((*MockDropletsService)(nil).Backups), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockDropletsService) Create(arg0 context.Context, arg1 *godo.DropletCreateRequest) (*godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDropletsServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDropletsService)(nil).Create), arg0, arg1)
}

// CreateMultiple mocks base method.
func (m *MockDropletsService) CreateMultiple(arg0 context.Context, arg1 *godo.DropletMultiCreateRequest) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiple", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMultiple indicates an expected call of CreateMultiple.
func (mr *MockDropletsServiceMockRecorder) CreateMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockDropletsService)(nil).CreateMultiple), arg0, arg1)
}

// Delete mocks base method.
func (m *MockDropletsService) Delete(arg0 context.Context, arg1 int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDropletsServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDropletsService)(nil).Delete), arg0, arg1)
}

// DeleteByTag mocks base method.
func (m *MockDropletsService) DeleteByTag(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTag", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByTag indicates an expected call of DeleteByTag.
func (mr *MockDropletsServiceMockRecorder) DeleteByTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTag", reflect.TypeOf((*MockDropletsService)(nil).DeleteByTag), arg0, arg1)
}

// Get mocks base method.
func (m *MockDropletsService) Get(arg0 context.Context, arg1 int) (*godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDropletsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDropletsService)(nil).Get), arg0, arg1)
}

// Kernels mocks base method.
func (m *MockDropletsService) Kernels(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Kernel, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kernels", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Kernel)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Kernels indicates an expected call of Kernels.
func (mr *MockDropletsServiceMockRecorder) Kernels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kernels", reflect.TypeOf((*MockDropletsService)(nil).Kernels), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockDropletsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockDropletsServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDropletsService)(nil).List), arg0, arg1)
}

// ListByTag mocks base method.
func (m *MockDropletsService) ListByTag(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTag", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByTag indicates an expected call of ListByTag.
func (mr *MockDropletsServiceMockRecorder) ListByTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTag", reflect.TypeOf((*MockDropletsService)(nil).ListByTag), arg0, arg1, arg2)
}

// Neighbors mocks base method.
func (m *MockDropletsService) Neighbors(arg0 context.Context, arg1 int) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neighbors", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Neighbors indicates an expected call of Neighbors.
func (mr *MockDropletsServiceMockRecorder) Neighbors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neighbors", reflect.TypeOf((*MockDropletsService)(nil).Neighbors), arg0, arg1)
}

// Snapshots mocks base method.
func (m *MockDropletsService) Snapshots(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots.
func (mr *MockDropletsServiceMockRecorder) Snapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockDropletsService)(nil).Snapshots), arg0, arg1, arg2)
}
